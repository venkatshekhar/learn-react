In a React project, `react` and `react-dom` are two separate libraries that serve different purposes. Understanding the distinction between them is essential for working effectively with React.

### 1. `react`
- **Purpose**: The `react` package contains the core React library, which provides the necessary tools to build user interfaces. This includes the ability to create components, manage state and props, handle lifecycle methods, and perform rendering logic.
  
- **Key Features**:
  - **JSX**: Provides the ability to use JSX syntax to define components.
  - **Component creation**: Allows you to create functional and class components.
  - **Hooks**: Offers a set of hooks (like `useState`, `useEffect`, etc.) for managing state and side effects.
  - **Virtual DOM**: Manages the virtual DOM, which is a lightweight representation of the actual DOM used for efficient updates.

- **Usage**: You always need to import `react` in your components because it contains the core React functionalities.

  ```javascript
  import React from 'react';
  
  function MyComponent() {
      return <div>Hello, World!</div>;
  }
  ```

### 2. `react-dom`
- **Purpose**: The `react-dom` package is responsible for rendering React components to the DOM. It bridges the gap between React's virtual DOM and the browser's actual DOM. It provides methods that allow React components to be rendered into the DOM.

- **Key Features**:
  - **Rendering**: The main feature of `react-dom` is the `ReactDOM.render()` method, which renders a React element into the actual DOM.
  - **Hydration**: Supports server-side rendering by providing the `hydrate` method, which reuses server-rendered HTML.
  - **Portals**: Enables rendering components outside the main DOM hierarchy using `ReactDOM.createPortal`.

- **Usage**: You typically use `react-dom` in your main application file to render your root component to the DOM.

  ```javascript
  import React from 'react';
  import ReactDOM from 'react-dom';
  import App from './App';

  ReactDOM.render(<App />, document.getElementById('root'));
  ```

### Key Differences:
- **Core Functionality vs. DOM Integration**: 
  - `react` provides the core library for building components and managing state.
  - `react-dom` integrates those components with the browser's DOM, enabling rendering and interaction.

- **Server-Side Rendering**:
  - `react-dom` provides specific methods like `hydrate` for handling server-side rendering scenarios.

- **Usage**:
  - You import `react` in almost every component to use React features like JSX, hooks, etc.
  - You import `react-dom` primarily in the entry point of your application to render your component tree to the DOM.

### Example of Both in Action:
In a standard React application:

```javascript
// index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// Render the root component to the DOM
ReactDOM.render(<App />, document.getElementById('root'));

// App.js
import React from 'react';

function App() {
  return <h1>Hello, World!</h1>;
}

export default App;
```

- `React` is used to define the `App` component.
- `ReactDOM.render` is used to render the `App` component into the DOM.

### Conclusion:
- **Use `react`** for building and structuring your UI components.
- **Use `react-dom`** to render those components into the DOM or interact with the actual DOM in specific ways.

Both libraries are essential in a React project, but they serve distinct roles within the React ecosystem.